openapi: 3.0.3
info:
  title: Employees API - OpenAPI 3.0
  description: |-
    This is a sample swagger for Employee API
  version: 1.0.0
servers:
  - url: localhost:8080/api/v1
tags:
  - name: Employee
    description: Everything about your employee
    externalDocs:
      description: Find out more
      url: http://swagger.io
paths:
  /employees:
    get:
      tags:
        - employee
      summary: Finds all employees
      description: Find employees
      operationId: findEmployees
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Employee'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Employee'
      security:
        - employeedatabase_auth:
            - write:employees
            - read:employees
    post:
      tags:
        - employee
      summary: Add a new employee to the database
      description: Add a new employee to the database
      operationId: addEmployee
      requestBody:
        description: Create a new employee in the database
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Employee'
          application/xml:
            schema:
              $ref: '#/components/schemas/Employee'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Employee'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'          
            application/xml:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '400':
          description: Invalid input
        '422':
          description: Validation exception
        '500':
          description: Internal server error
      security:
        - employeedatabase_auth:
            - write:employees
            - read:employees
  /employees/{employeeId}:
    put:
      tags:
        - employee
      summary: Update an existing employee
      description: Update an existing employee by Id
      operationId: updateEmployee
      parameters:
        - name: employeeId
          in: path
          description: ID of employee to return
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Update an existent employee in the database
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Employee'
          application/xml:
            schema:
              $ref: '#/components/schemas/Employee'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Employee'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '400':
          description: Invalid ID supplied
        '404':
          description: Employee not found
        '422':
          description: Validation exception
        '500':
          description: Internal server error
      security:
        - employeedatabase_auth:
            - write:employees
            - read:employees
    get:
      tags:
        - employee
      summary: Find employee by ID
      description: Returns a single employee
      operationId: getEmployeeById
      parameters:
        - name: employeeId
          in: path
          description: ID of employee to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Employee'          
            application/xml:
              schema:
                $ref: '#/components/schemas/Employee'
        '400':
          description: Invalid ID supplied
        '404':
          description: Employee not found
        '500':
          description: Internal server error
      security:
        - api_key: []
        - employeedatabase_auth:
            - write:employees
            - read:employees
    delete:
      tags:
        - employee
      summary: Deletes a employee
      description: delete a employee
      operationId: deleteEmployee
      parameters:
        - name: employeeId
          in: path
          description: Employee id to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:     
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'          
            application/xml:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '400':
          description: Invalid ID supplied
        '404':
          description: Employee not found
        '500':
          description: Internal server error
      security:
        - employeedatabase_auth:
            - write:employees
            - read:employees
  /employees/find-by-status:
    get:
      tags:
        - employee
      summary: Finds employees by status
      description: Multiple status values can be provided with comma separated strings
      operationId: findEmployeesByStatus
      parameters:
        - name: status
          in: query
          description: Status values that need to be considered for filter
          required: false
          explode: true
          schema:
            type: string
            default: active
            enum:
              - active
              - inactive
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Employee'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Employee'
        '400':
          description: Invalid status value
        '500':
          description: Internal server error
      security:
        - employeedatabase_auth:
            - write:employees
            - read:employees
components:
  schemas:
    Employee:
      required:
        - username
        - firstName
        - lastName
        - email
        - category
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        username:
          type: string
          example: sharaaf.nazeer
        firstName:
          type: string
          example: Sharaaf
        lastName:
          type: string
          example: Nazeer
        email:
          type: string
          example: john@email.com
        category:
          $ref: '#/components/schemas/Category'
        photoUrls:
          type: array
          xml:
            wrapped: true
          items:
            type: string
            xml:
              name: photoUrl
        address:
          type: array
          xml:
            name: addresses
            wrapped: true
          items:
            $ref: '#/components/schemas/Address'
        status:
          type: string
          description: employee status in the database
          enum:
            - active
            - inactive
      xml:
        name: employee
    Address:
      type: object
      properties:
        street:
          type: string
          example: 437 Lytton
        city:
          type: string
          example: Palo Alto
        state:
          type: string
          example: CA
        zip:
          type: string
          example: '94301'
      xml:
        name: address
    Category:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        name:
          type: string
          example: External
      xml:
        name: category
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
      xml:
        name: '##default'
  requestBodies:
    Employee:
      description: Employee object that needs to be added to the database
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Employee'
        application/xml:
          schema:
            $ref: '#/components/schemas/Employee'
  securitySchemes:
    employeedatabase_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: https://employeedatabase3.swagger.io/oauth/authorize
          scopes:
            write:employees: modify employees in your account
            read:employees: read your employees
    api_key:
      type: apiKey
      name: api_key
      in: header